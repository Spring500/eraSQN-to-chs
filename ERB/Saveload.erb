;[ライセンス]パブリックドメイン
;本ファイルに係る著作権を放棄する。
;本ファイルに係る著作人格権は行使しない。
;2009/3/28 MinorShift(Emuera作者)
;2010/4/2 MinorShift(Emuera作者) ver 1.736に合わせて一部修正。

;独自のセーブ・ロードシステムの例（Emuera  ver 1.736以降対象）
;LOADGAMEの代わりにCALL LOADGAME_EX、SAVEGAMEの代わりにCALL SAVEGAME_EXを実行してください。
;実際に使用するには旧来の@SAVEINFOに合わせて@SAVEINFO_EXを編集する必要があります。
;使用している命令の詳細については下記のEmueraWikiを参照してください。
;http://sourceforge.jp/projects/emuera/wiki/FrontPage

@SAVEGAME_EX
PRINTL 
LOCAL:2 = RESULT
LOCALS:2 = %RESULTS%

$REDRAW_SAVEDATA
REDRAW 0
SIF STRLENS(SAVESTR:11)
	PRINTFORM 現在の物語の名前は『%SAVESTR:11%』です。
PRINTL 何番にセーブしますか？
$REDRAW_SAVEDATA2
CALL PRINT_SAVEDATA, FLAG:1
PRINTL [100] 戻る
PRINTL [999] この物語に名前をつける
REDRAW 1
$INPUT_DATANUM
INPUT
IF RESULT == 100
	RESULTS = %LOCALS:2%
	RETURN LOCAL:2
ELSEIF RESULT == 999
	CALL SET_SAVEDATA_NAME
	RESTART
ELSEIF RESULT < 0 || RESULT >= SAVENOS()
	
ELSEIF RESULT >= FLAG:1 * 20 && RESULT < FLAG:1 * 20 + 20
	LOCAL = RESULT
	CHKDATA LOCAL
	;元のSAVEGAMEではRESULT == 0のとき以外は確認をとらない
	IF RESULT == 0
		PRINTL 既にデータが存在します。上書きしますか？
		PRINTLC [0] はい
		PRINTLC [1] いいえ
		PRINTL 
$YESNO_INPUT_LOOP
		INPUT
		IF RESULT == 1
			GOTO REDRAW_SAVEDATA
		ELSEIF RESULT != 0
			CLEARLINE 1
			REUSELASTLINE 無効な値です
			GOTO YESNO_INPUT_LOOP
		ENDIF
	ENDIF

	;フラグに使う現実時間を取得
	CALL GET_REALTIMEFORFLAG
	;一言イベントフラグ初期化
	FLAG:23 = 0

	CALL SAVEINFO_EX
	SAVEDATA LOCAL, RESULTS

	RESULTS = %LOCALS:2%
	RETURN LOCAL:2
ELSE
	FLAG:1 = RESULT/20
	REDRAW 0
	GOTO REDRAW_SAVEDATA2
ENDIF
CLEARLINE 1
REUSELASTLINE 無効な値です
GOTO INPUT_DATANUM

@LOADGAME_EX
PRINTL 
LOCAL:2 = RESULT
LOCALS:2 = %RESULTS%

$REDRAW_SAVEDATA
REDRAW 0
SIF STRLENS(SAVESTR:11)
	PRINTFORM 現在の物語の名前は『%SAVESTR:11%』です。
PRINTL 何番をロードしますか？
$REDRAW_SAVEDATA2
CALL PRINT_SAVEDATA, FLAG:1
CHKDATA 99
PRINTFORML  [99] %RESULTS:0%
PRINTL [100] 戻る
REDRAW 1
$INPUT_DATANUM
INPUT
IF RESULT == 100
	RESULTS = %LOCALS:2%
	RETURN LOCAL:2
ELSEIF ((RESULT < 0) || (RESULT >= SAVENOS())) && RESULT != 99

ELSEIF ((RESULT >= FLAG:1 * 20) && (RESULT < FLAG:1 * 20 + 20)) || RESULT == 99
	LOCAL = RESULT
	CHKDATA LOCAL
	;RESULT == 0ならロード可能
	IF RESULT != 0
		PRINTVL LOCAL
		PRINTL データがありません
		GOTO REDRAW_SAVEDATA
	ENDIF
	LOADDATA LOCAL

	RESULTS = %LOCALS:2%
	RETURN LOCAL:2
ELSE
	FLAG:1 = RESULT/20
	REDRAW 0
	GOTO REDRAW_SAVEDATA2
ENDIF
CLEARLINE 1
REUSELASTLINE 無効な値です
GOTO INPUT_DATANUM

@PRINT_SAVEDATA, ARG
#DIM LCOUNT
;ARG:0 何ページ目を表示しているか。
IF ARG > 0
	FOR LCOUNT, 0, ARG
		PRINTFORML  [{LCOUNT*20, 2}] セーブデータ{LCOUNT*20, 2}～{LCOUNT*20+19, 2}を表示
	NEXT
ENDIF
FOR LCOUNT, ARG * 20, ARG * 20 + 20
	SIF LCOUNT >= SAVENOS()
		BREAK

	CHKDATA LCOUNT
	PRINTFORML  [{LCOUNT, 2, RIGHT}] %RESULTS:0%
NEXT
IF (ARG + 1) < (SAVENOS() + 19 / 20)
	FOR LCOUNT, ARG + 1, (SAVENOS() + 19) / 20
		PRINTFORML  [{LCOUNT*20, 2}] セーブデータ{LCOUNT*20, 2}～{MIN(LCOUNT*20+19, SAVENOS() - 1), 2}を表示
	NEXT
ENDIF
RETURN

@SAVEINFO_EX
;SAVEDATA命令は@SAVEINFO関数を呼ばないのでPUTFORMの代わりの文字列を用意する必要がある
;GETTIME関数でRESULTSに現在時刻を表す文字列を代入
RESULTS = %GETTIMES_CUSTOM()%
SIF STRLENS(SAVESTR:11)
	RESULTS = 『%SAVESTR:11%』%RESULTS%
RESULTS = %RESULTS% %SAVEINFO_MESSAGE()%
RETURN RESULT

@GETTIMES_CUSTOM()
#FUNCTIONS
;カスタム時間表示の例
;まずは取得
LOCAL = GETTIME()
;年。下二桁のみに簡略化
LOCAL:1 = (LOCAL / 10000000000000) % 100
LOCALS = \@(LOCAL:1 < 10) ? 0{LOCAL:1} # {LOCAL:1}\@
;月
LOCAL:1 = (LOCAL / 100000000000) % 100
LOCALS = %LOCALS%/\@(LOCAL:1 < 10) ? 0{LOCAL:1} # {LOCAL:1}\@
;日
LOCAL:1 = (LOCAL / 1000000000) % 100
LOCALS = %LOCALS%/\@(LOCAL:1 < 10) ? 0{LOCAL:1} # {LOCAL:1}\@
;時
LOCAL:1 = ((LOCAL / 10000000) % 100) % 24
LOCALS = %LOCALS% \@ LOCAL:1 < 10 ? 0 # \@{LOCAL:1}

;午前午後表示
;LOCAL:2 = (((LOCAL / 10000000) % 100) / 12) % 2
;LOCALS = %LOCALS% \@(LOCAL:2) ? 午後 # 午前\@\@LOCAL:1 < 10 ? 0 # \@{LOCAL:1}

;分
LOCAL:1 = (LOCAL / 100000) % 100
LOCALS = %LOCALS%:\@LOCAL:1 < 10 ? 0 # \@{LOCAL:1}
;秒は省略
RETURNF LOCALS

@SAVEINFO
PUTFORM %SAVEINFO_MESSAGE()%

@SAVEINFO_MESSAGE()
#FUNCTIONS

LOCALS = {FLAG:4 + 1}周目
IF TIME == 0
	LOCALS = %LOCALS% {DAY}日 昼
ELSE
	LOCALS = %LOCALS% {DAY}日 夜
ENDIF
LOCALS = %LOCALS% LV{FLAG:255}
IF MONEY >= 100000000
	LOCALS = %LOCALS% 億万長者
ELSEIF MONEY >= 100000
	LOCALS = %LOCALS% ${MONEY/10000}万
ELSE
	LOCALS = %LOCALS% %MONEY_C(MONEY)%
ENDIF
;SIF FLAG:31
;	LOCALS = %LOCALS% 攻略済み：{FLAG:31}人
SIF TARGET
	LOCALS = %LOCALS% %NAME:TARGET%(LV{ABL:ＬＶ})調教中

RETURNF LOCALS

@SET_SAVEDATA_NAME
IF STRLENS(SAVESTR:11)
	PRINTFORML 現在の物語の名前は『%SAVESTR:11%』です。
	PRINTFORML  [ 0] 名前を変える
	PRINTFORML  [ 1] 名前を無くす
	PRINTFORML [100] 戻る
	CALL INPUT_SELECT, 2, 100
ELSE
	PRINTFORML この物語には、まだ名前がありません。
	PRINTFORML 物語に名前をつけることで、セーブデータの区別が容易になるでしょう…
	PRINTFORML  [ 0] 名前をつける
	PRINTFORML [100] 戻る
	CALL INPUT_SELECT, 1, 100
ENDIF
IF RESULT == 100
	RETURN 0
ELSEIF RESULT == 1
	SAVESTR:11 = 
	PRINTFORMW 物語の名前をなくしました
ELSE
	PRINTFORML 物語の名前を変更します
	PRINTFORML 全角16文字以内で名前を入力してください。何も入力しない場合は変更しません。
	CALL SAVENAME_CONVERT_INPUT
ENDIF

@SAVENAME_CONVERT_INPUT
INPUTS
IF STRLENS(RESULTS) > 32
	PRINTFORMW 物語の名前が長すぎます。全角で16文字までに収めてください。
	RESTART
ELSEIF STRLENS(RESULTS)
	PRINTFORMW 物語の名前を『%RESULTS%』に変更しました
	SAVESTR:11 = %RESULTS%
ELSE
	PRINTW 変更しませんでした
ENDIF

@TITLE_LOADGAME
;タイトル画面のロードでも独自のロード画面を使う場合、@TITLE_LOADGAMEを定義する
;@TITLE_LOADGAMEが定義されていると、標準のロード画面の代わりにTITLE_LOADGAMEが呼ばれる。
CALL LOADGAME_EX
RETURN
;RETURNするとタイトルへ戻る。

;@SYSTEM_AUTOSAVE
;オートセーブの処理を独自に行う場合、@SYSTEM_AUTOSAVEを定義する
;@SYSTEM_AUTOSAVEが定義されていると、標準のオートセーブの代わりにSYSTEM_AUTOSAVEが呼ばれる。;@SYSTEM_AUTOSAVEを定義し何もしないでRETURNすればオートセーブを禁止できる。
;その場合はLOADDATA_EXから99番のデータに関する記述を削除しておくと親切。
;CALL SAVEINFO_EX
;SAVEDATA 99, RESULTS

@EVENTLOAD
#PRI
SIF LASTLOAD_NO != 99
	FLAG:1 = LASTLOAD_NO/20
