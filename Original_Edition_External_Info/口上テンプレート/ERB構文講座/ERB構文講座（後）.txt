４）分岐と反復

○条件式
　分岐や反復の前に、それらの実行される基準となる条件式についてです。
　条件式は変数と変数、変数と数値などを比較し、それが正しいかどうかを判定します。
　その比較に使われるのが比較演算子で、==,!=,<,>,<=,>=などがあります。
　==は等しい、!=は等しくない、不等号はそれぞれそのままの意味です。

　例えば、A = 0,B = 1,C = 0のとき
　A == B　は不成立（正しくない）、A == C　は成立（正しい）、
　A > B　は不成立、B > C　は成立、
　B <= A　は不成立、A >= C　は成立します。

　また、比較演算子を使った条件式の代わりに0かそれ以外の数字を書くことでも
　成立と不成立を表すことができます。この場合、0が不成立、それ以外が成立です。

　複数の条件式を使う場合は、条件式と条件式の間に&&や||を記述します。
　例えば、変数Ａが０かつ変数Ｂが１という条件の場合はA == 0 && B == 1となります。
　変数Ａが０または変数Ｂが０という条件ならA == 0 || B == 0となります。
　もっと複雑に、変数Ａが０で変数Ｂが１、または変数Ａが０で変数Ｃが１なら
　(A == 0 && B == 1) || (A == 0 && C == 1)　もしくは
　A == 0 && (B == 1 || C == 1)　となります。

・キャラの能力や素質を判定する
　よく使われる条件式の中に、キャラの能力や素質を判断するものがあります。
　例えば、調教中のキャラが処女の時、TALENT:TARGET:0 == 1が成立します。
　素質は持っている状態が1、持っていない状態が0となるため、
　条件式に単にTALENT:TARGET:0と書いた場合、調教中のキャラが処女である
　という条件と同じ意味になります。
　調教中のキャラの従順がLv３以上の時は、ABL:TARGET:0 >= 3が成立します。
　能力や刻印はLvがそのまま数値となります。
　体力や経験などレベルで表されない能力は、値がそのまま使用されます。
　調教中のキャラのＶ経験が10以上を表すのは、EXP:TARGET:0 >= 10となります。

・ランダム
　RAND:（数値もしくは数値変数）と記述することで、一定の範囲の中から
　ランダムで数値を決定することができます。
　例えば、A = RAND:10と記述した場合、変数Ａは0から9(10 - 1)までの
　いずれかの整数になります。また、

A = 5
B = RAND:A

　と記述した場合、変数Ｂは0から4(A - 1 = 5 - 1)までのいずれかの整数になります。

○分岐
　○○が××した時□□を表示する、のような処理を行うのが分岐です。
　分岐に使われる構文にはIFとSIFがあります。

・IF-ELSEIF-ELSE-ENDIF
　もし○○ならば、という処理に最もよく使われる構文です。

IF A == 0
	PRINTFORML 変数Ａは０です。
ELSEIF B == 0
	PRINTFORML 変数Ａは０でなく、変数Ｂは０です。
ELSE
	PRINTFORML 変数Ａは０でなく、変数Ｂも０ではありません。
ENDIF

　上がIF-ELSEIF-ELSE-ENDIF構文の基本的な形です。上の構文は
　もし変数Ａが０ならば（IF A == 0）『変数Ａは０です。』と表示します。
　変数Ａが０でなく変数Ｂが０ならば（ELSEIF B == 0）
　『変数Ａは０でなく、変数Ｂは０です。』と表示します。
　いずれの条件にも当てはまらないならば（ELSE）
　『変数Ａは０でなく、変数Ｂも０ではありません。』と表示します。
　このように上から順に条件式を判定していき、成立した部分の直後の処理のみを行います。
　上の例文では処理の部分が１行ずつしかありませんが、実際には
　次のELSEIF,ELSE,ENDIFまでの処理が全て行われます。

IF 条件式１
	処理１
	処理２
	処理３
ELSEIF 条件式２
	処理４
	処理５
ELSE
	処理６
ENDIF
（条件式１が成立の時は処理１〜３、条件式１が不成立で条件式２が成立の時は
　処理４と５、どちらも不成立の時は処理６のみが行われる）

　判定したい条件が１つしかない場合は、ELSEIF以下の部分はなくても構いません。
IF A == 0
	PRINTFORML 変数Ａは０です。
ELSE
	PRINTFORML 変数Ａは０ではありません。
ENDIF

　条件を満たさない時何も処理しない場合、ELSE以下の部分はなくても構いません。
IF A == 0
	PRINTFORML 変数Ａは０です。
ELSEIF B == 0
	PRINTFORML 変数Ａは０でなく、変数Ｂは０です。
ENDIF

　IFとENDIFは絶対に必要です。ENDIFの書き忘れはエラーになりますので注意しましょう。

・SIF
　上のIF-ELSEIF-ELSE-ENDIFを簡略化したのがSIFになります。

SIF A == 0
	PRINTFORML 変数Ａは０です。

　SIFにはENDIFが必要ない、ELSEIFやELSEが使用できない、直後の１行しか実行できない
　などの特徴があります。例えば

SIF 条件式
	処理１
	処理２

　と記述すると、条件式の正否に関わらず処理２は実行されてしまうので注意しましょう。
　２つ以上の処理を行う時は上のIF-ELSEIF-ELSE-ENDIFを使いましょう。

・IFとSIFの組み合わせ

IF 条件式１
	SIF 条件式２
		処理１
	処理２
	処理３
ENDIF

　と記述すると、条件式１のみが成立する時は処理２と３を
　条件式２も成立する時は処理１から３を実行させることができます。

SIF 条件式１
	IF 条件式２
		処理１
		処理２
	ENDIF

　逆にこう記述すると、条件式１が成立しない時にエラーが発生します。
　SIFの直後の行にIFやSIFなどの特殊な処理を行う文は書かないようにしましょう。

○反復
　同じような処理を複数回繰り返すときに使うのが反復です。
　反復はREPEAT-REND間の処理を繰り返し実行します。

REPEAT 10
	PRINTFORML あ
REND

　と記述すると、『あ』が10行分表示されます。
　繰り返す回数はREPEAT（半角スペース）の直後にある数値か数値変数回です。

・COUNT
　変数COUNTは、REPEATで現在までに何回繰り返しを行ったかを格納しています。
　REPEAT-REND内の処理を最初に行う時はまだ一度も繰り返していないので

REPEAT 10
	PRINTFORML 現在{COUNT}回目です。
REND

　こう記述した場合、表示されるのは0回目から9回目となります。
　COUNTがとる値は0からREPEATの直後の数値-1までと覚えておきましょう。
　また、COUNTに数値を代入するのはエラーの原因となるので注意しましょう。

・REPEATとIF,SIFの組み合わせ

　REPEAT-RENDの間にもIFやSIFを使用することができます。

REPEAT 10
	IF COUNT == 5
		PRINTFORML 6回目です？
	ELSE
		PRINTFORML {COUNT}回目です
	ENDIF
REND

　と記述すると、COUNTが5、つまり６回目のみ最後に？が表示されます。
　また、REPEAT-RENDの間にもう一つREPEAT-RENDを使用することはできません。


５）関数と関数呼び出し
ここからは主に機能パッチやバリアントを作成する際に使う範囲となります。

○関数とは
　いくつかの決まった処理を行わせたい時、それを予め別の場所に記述しておいて
　任意の場所から使えるようにしたものを関数と言います。
　例として、変数Ａを10倍にして返す関数を作ってみましょう。

@A_TEN_TIMES
A = A * 10

　@の後に半角英数と_で関数の名前を付けることができます。
　それ以降の処理が関数で行う内容となります。

A = 0
CALL A_TEN_TIMES
PRINTFORML 変数Ａは{A}です。

A = 5
CALL A_TEN_TIMES
PRINTFORML 変数Ａは{A}です。

　作った関数を利用する（呼び出す）にはCALL （関数名）と記述します。
　この結果、上は『変数Ａは0です。』下は『変数Ａは50です。』と表示されます。
　また、関数を呼び出すのにJUMP （関数名）を使うこともあります。
　CALLとJUMPの違いは関数での処理を実行した後、元の場所に戻ってくるかどうかで
　CALLは戻ってくる、JUMPは戻ってこないようになっています。

　ある条件を満たした時、関数を途中で終わらせたいという場合は
　RETURN （数値もしくは数値変数）を利用します。

@TEST
SIF A == 0
	RETURN 0
A = A * 5

　この場合、関数TESTを呼び出した時Aが0なら何も行われず、そうでなければ
　Aが５倍されて返ってきます。
　また、RETURNで元の場所に戻ってくるとRESULTを書き変えます。

@TEST2
IF A == 0
	RETURN 0
ELSEIF A == 1
	RETURN 1
ELSEIF A == 2
	RETURN 2
ELSE
	RETURN 9
ENDIF

　という関数を作り、別の場所から呼び出すと

A = 0
CALL TEST2
PRINTFORML {RESULT}

A = 2
CALL TEST2
PRINTFORML {RESULT}

A = 3
CALL TEST2
PRINTFORML {RESULT}

　上から順に0,2,9が表示されます。


６）ラベルとキー入力
主に選択肢による分岐で使用されるのがラベルとキー入力です。

PRINTFORML 選択してください
PRINTFORML [0]選択肢１
PRINTFORML [1]選択肢２

$INPUT_LOOP
INPUT

IF RESULT != 0 && RESULT != 1
	GOTO INPUT_LOOP
ELSEIF RESULT == 0
	処理１
ELSEIF RESULT == 1
	処理２
ENDIF

INPUTはキー入力待ちをし、入力された数値をRESULTに格納します。
この場合、0を入力すれば処理１、1を入力すれば処理２を実行します。
0でも1でもない数値を入力した場合、RESULT != 0 && RESULT != 1が成立するため
GOTO INPUT_LOOPが実行されます。
GOTO （ラベル名）は$（ラベル名）の処理に移動するもので、CALLやJUMPと@との
関係に似ていますが、GOTOと$に関しては同じ関数内にある必要があります。
GOTO INPUT_LOOPで$INPUT_LOOPに移動すると再びINPUTを実行するため、
この一連の処理は0か1かを入力するまで繰り返されることになります。

また、一つの関数内で複数の$とGOTOの組み合わせを使用すると『IFに対応しない
ELSEIF,ELSE,ENDIFが〜』というエラーが発生することがあります。
この場合、２つ目の入力処理を別の関数に移すなどの工夫をしましょう。

７）その他注意点など
○キャラの追加と削除
　キャラの追加と削除には、ADDCHARAとDELCHARAを使用します。

ADDCHARA 1
ADDCHARA 5
ADDCHARA 9

　ADDCHARAではCSVにあるキャラ番号が参照されます。

DELCHARA 3
DELCHARA 1

　DELCHARAではキャラ番号ではなく、キャラの登録番号が参照されます。
　ここまでの処理でキャラ番号１、５、９のキャラが追加され、次に登録番号３番、
　つまりキャラ番号９のキャラが削除、その後登録番号１番、つまりキャラ番号１番の
　キャラが削除され、キャラ番号５番のキャラのみが残る状態になります。
　DELCHARAを続けて使用する際には、削除された登録番号より後のキャラは
　それぞれ前に詰められることに注意しましょう。

　また、キャラの追加・削除をする場合は調教中のキャラ、助手などの状態を
　確認しましょう。例えば助手をやっていたキャラがDELCHARAで削除されても
　助手の登録番号を保存しているASSIは変化しません。しかし全体の登録番号は
　前にずれてしまうため、助手になる条件を満たしていないキャラが助手に
　なってしまうこともあります。

○計算・表示
　BAR（BARL）を使用することで数値の表示を視覚的に行うことができます。
　BAR （数値or変数）,（数値or変数）,（グラフの長さ）のように記述し

A = 80
B = 100
BAR A,B,10

　では

[********..]

　と表示されます。
　Aに現在の値、Bにその最大値を入れることで、現在の値が最大値のうちどのくらいの
　割合かを示す際によく使用されます。
　BARLでは表示後に改行されることも覚えておきましょう。


　era basicでは変数などは全て整数で処理されますが、例外として
　TIMESを使用することで小数の計算を行うことができます。

A = 1000
TIMES A,1.5

　これで変数Ａは1000×1.5の1500となります。

○その他の命令
　WAIT…入力待ちのみを行います。RESULTに値は格納されません。
　QUIT…eramakerを終了させます。主にゲームオーバー時などに使用します。
